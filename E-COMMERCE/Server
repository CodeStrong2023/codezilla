

const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const db = require('./database');

const app = express();
const PUERTO = 3000;
const SECRETO_JWT = 'ADMINISTRADOR1234';

// Middleware
app.use(cors());
app.use(bodyParser.json());

// CreaciÃ³n de producto
app.post('/api/productos', (req, res) => {
    const { nombre, descripcion, precio } = req.body;
    db.run("INSERT INTO productos (nombre, descripcion, precio) VALUES (?, ?, ?)", [nombre, descripcion, precio], function(err) {
        if (err) {
            return res.status(400).json({ error: err.message });
        }
        res.status(201).json({ id: this.lastID, nombre, descripcion, precio });
    });
});

// Esto va Leer todos los productos
app.get('/api/productos', (req, res) => {
    db.all("SELECT * FROM productos", [], (err, filas) => {
        if (err) {
            return res.status(500).json({ error: err.message });
        }
        res.json(filas);
    });
});

// Actualizamos los producto
app.put('/api/productos/:id', (req, res) => {
    const { id } = req.params;
    const { nombre, descripcion, precio } = req.body;
    db.run("UPDATE productos SET nombre = ?, descripcion = ?, precio = ? WHERE id = ?", [nombre, descripcion, precio, id], function(err) {
        if (err) {
            return res.status(400).json({ error: err.message });
        }
        res.json({ mensaje: 'Producto actualizado', cambios: this.changes });
    });
});

// Eliminamos un producto
app.delete('/api/productos/:id', (req, res) => {
    const { id } = req.params;
    db.run("DELETE FROM productos WHERE id = ?", id, function(err) {
        if (err) {
            return res.status(400).json({ error: err.message });
        }
        res.json({ mensaje: 'Producto eliminado', cambios: this.changes });
    });
});



// Crear usuario
app.post('/api/registrarse'), async (req, res) => {
    const { usuario, contrasena } = req.body;
    const contrasenaH = await bcrypt.hash(contrasena, 10);
};
    